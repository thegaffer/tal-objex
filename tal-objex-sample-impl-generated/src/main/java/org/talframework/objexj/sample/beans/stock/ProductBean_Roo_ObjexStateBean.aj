// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.beans.stock;

import java.lang.Object;
import java.lang.String;
import java.util.Date;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.NotPersistent;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.talframework.objexj.ObjexID;
import org.talframework.objexj.ObjexObjStateBean;
import org.talframework.objexj.ObjexObjStateBean.ObjexFieldType;
import org.talframework.objexj.ObjexStateReader;
import org.talframework.objexj.ObjexStateWriter;
import org.talframework.objexj.object.StateBeanUtils;

privileged aspect ProductBean_Roo_ObjexStateBean {
    
    declare parents: ProductBean implements ObjexObjStateBean;
    
    declare @type: ProductBean: @PersistenceCapable;
    
    declare @type: ProductBean: @XmlRootElement;
    
    @PrimaryKey
    @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
    @Extension(vendorName = "datanucleus", key = "gae.encoded-pk", value = "true")
    private String ProductBean.id;
    
    @Persistent(column = "parentId")
    private String ProductBean.parentId;
    
    @NotPersistent
    private transient boolean ProductBean._editable;
    
    public ProductBean.new() {
        super();
        _editable = false;
    }

    @XmlAttribute
    @XmlID
    public String ProductBean.getId() {
        return this.id;
    }
    
    public void ProductBean.setId(String val) {
        if( this.id != null ) throw new IllegalArgumentException("You cannot set a parent ID on an object once it is set");
        this.id = val;
    }
    
    @XmlAttribute
    public String ProductBean.getParentId() {
        return this.parentId;
    }
    
    public void ProductBean.setParentId(String val) {
        if( this.parentId != null ) throw new IllegalArgumentException("You cannot set a parent ID on an object once it is set");
        this.parentId = val;
    }
    
    @XmlTransient
    public boolean ProductBean.isEditable() {
        return _editable;
    }
    
    public void ProductBean.setEditable() {
        _editable = true;
    }
    
    @XmlTransient
    public String ProductBean.getObjexObjType() {
        return "Product";
    }
    
    public void ProductBean.create(ObjexID parentId) {
        this.parentId = parentId != null ? parentId.toString() : null;
    }
    
    public void ProductBean.preSave(Object id) {
        this.id = id != null ? id.toString() : null;
    }
    
    public ObjexObjStateBean ProductBean.cloneState() {
        ProductBean ret = new ProductBean();
        ret.name = this.name;
        ret.description = this.description;
        ret.effectiveFrom = this.effectiveFrom;
        ret.effectiveTo = this.effectiveTo;
        ret.price = this.price;
        ret.currency = this.currency;
        ret.id = this.id;
        ret.parentId = this.parentId;
        return ret;
    }
    
    @XmlAttribute
    public String ProductBean.getName() {
        return name;
    }
    
    public void ProductBean.setName(String val) {
        name = val;
    }
    
    @XmlAttribute
    public String ProductBean.getDescription() {
        return description;
    }
    
    public void ProductBean.setDescription(String val) {
        description = val;
    }
    
    @XmlAttribute
    public Date ProductBean.getEffectiveFrom() {
        return effectiveFrom;
    }
    
    public void ProductBean.setEffectiveFrom(Date val) {
        effectiveFrom = val;
    }
    
    @XmlAttribute
    public Date ProductBean.getEffectiveTo() {
        return effectiveTo;
    }
    
    public void ProductBean.setEffectiveTo(Date val) {
        effectiveTo = val;
    }
    
    @XmlAttribute
    public double ProductBean.getPrice() {
        return price;
    }
    
    public void ProductBean.setPrice(double val) {
        price = val;
    }
    
    @XmlAttribute
    public String ProductBean.getCurrency() {
        return currency;
    }
    
    public void ProductBean.setCurrency(String val) {
        currency = val;
    }
    
    public void ProductBean.updateTemporaryReferences(java.util.Map<ObjexID, ObjexID> refs) {
        parentId = StateBeanUtils.updateTempReferences(parentId, refs);
    }
    
    public void ProductBean.acceptReader(ObjexStateReader reader) {
        name = reader.read("name", java.lang.String.class, ObjexFieldType.STRING, true);
        description = reader.read("description", java.lang.String.class, ObjexFieldType.STRING, true);
        effectiveFrom = reader.read("effectiveFrom", java.util.Date.class, ObjexFieldType.DATE, true);
        effectiveTo = reader.read("effectiveTo", java.util.Date.class, ObjexFieldType.DATE, true);
        price = reader.read("price", double.class, ObjexFieldType.NUMBER, true);
        currency = reader.read("currency", java.lang.String.class, ObjexFieldType.STRING, true);
    }
    
    public void ProductBean.acceptWriter(ObjexStateWriter writer, boolean includeNonPersistent) {
        writer.write("name", name, ObjexFieldType.STRING, true);
        writer.write("description", description, ObjexFieldType.STRING, true);
        writer.write("effectiveFrom", effectiveFrom, ObjexFieldType.DATE, true);
        writer.write("effectiveTo", effectiveTo, ObjexFieldType.DATE, true);
        writer.write("price", price, ObjexFieldType.NUMBER, true);
        writer.write("currency", currency, ObjexFieldType.STRING, true);
    }
    
}
