// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.model.order.impl;

import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.validation.ConstraintValidatorContext;
import javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder;
import org.talframework.objexj.ObjexObjStateBean;
import org.talframework.objexj.object.BaseObjexObj;
import org.talframework.objexj.object.ReferenceFieldUtils;
import org.talframework.objexj.object.ReferenceListFieldUtils;
import org.talframework.objexj.object.SimpleFieldUtils;
import org.talframework.objexj.sample.api.order.OrderItem;
import org.talframework.objexj.sample.beans.order.OrderBean;
import org.talframework.objexj.validation.object.SelfChildValidator;
import org.talframework.objexj.validation.object.SelfInterObjectValidator;
import org.talframework.objexj.validation.object.SelfIntraObjectValidator;

privileged aspect OrderImpl_Roo_ObjexObj {
    
    declare parents: OrderImpl extends BaseObjexObj;
    
    declare parents: OrderImpl implements SelfIntraObjectValidator;
    
    declare parents: OrderImpl implements SelfInterObjectValidator;
    
    declare parents: OrderImpl implements SelfChildValidator;
    
    public OrderBean OrderImpl.getLocalState() {
        return bean;
    }
    
    public ObjexObjStateBean OrderImpl.getStateBean() {
        return bean;
    }
    
    public long OrderImpl.getAccount() {
        long rawValue = bean.getAccount();
        long val = cloneValue(rawValue);
        return val;
    }
    
    public void OrderImpl.setAccount(long val) {
        long rawValue = val;
        bean.setAccount(SimpleFieldUtils.setSimple(this, bean, "account", rawValue, bean.getAccount()));
    }
    
    public java.util.List<OrderItem> OrderImpl.getItems() {
        return ReferenceListFieldUtils.getList(this, OrderItem.class, bean.getItems());
    }
    
    public void OrderImpl.setItems(java.util.List<OrderItem> val) {
        bean.setItems(ReferenceListFieldUtils.setList(this, bean, bean.getItems(), val, true));
    }
    
    public OrderItem OrderImpl.getItemByIndex(int index) {
        return ReferenceListFieldUtils.getElementByIndex(this, OrderItem.class, bean.getItems(), index);
    }
    
    public OrderItem OrderImpl.createItem() {
        String type = "OrderItem";
        OrderItem val = ReferenceListFieldUtils.createElement(this, bean, OrderItem.class, type);
        bean.setItems(ReferenceListFieldUtils.addElement(this, bean, bean.getItems(), val));
        return val;
    }
    
    public void OrderImpl.removeItemByIndex(int index) {
        bean.setItems(ReferenceListFieldUtils.removeElementByIndex(this, bean, bean.getItems(), true, index));
    }
    
    public void OrderImpl.removeItemById(Object id) {
        bean.setItems(ReferenceListFieldUtils.removeElementById(this, bean, bean.getItems(), true, id));
    }
    
    public void OrderImpl.removeAllItems() {
        bean.setItems(ReferenceListFieldUtils.removeAll(this, bean, bean.getItems(), true));
    }
    
    public List<String> OrderImpl.getItemRefs() {
        List<String> rawValue = bean.getItems();
        List<String> val = rawValue;
        return val;
    }
    
    public void OrderImpl.setItemRefs(List<String> val) {
        List<String> rawValue = val;
        bean.setItems(SimpleFieldUtils.setSimple(this, bean, "ItemRefs", rawValue, bean.getItems()));
    }
    
    public OrderItem OrderImpl.getTest() {
        return ReferenceFieldUtils.getReference(this, OrderItem.class, bean.getTest());
    }
    
    public void OrderImpl.setTest(OrderItem val) {
        bean.setTest(ReferenceFieldUtils.setReference(this, bean, bean.getTest(), val, true, "null"));
    }
    
    public OrderItem OrderImpl.createTest(String type) {
        OrderItem val = ReferenceFieldUtils.createReference(this, bean, OrderItem.class, type);
        bean.setTest(ReferenceFieldUtils.setReference(this, bean, bean.getTest(), val, true, "null"));
        return val;
    }
    
    public String OrderImpl.getTestRef() {
        String rawValue = bean.getTest();
        String val = rawValue;
        return val;
    }
    
    public void OrderImpl.setTestRef(String val) {
        String rawValue = val;
        bean.setTest(SimpleFieldUtils.setSimple(this, bean, "TestRef", rawValue, bean.getTest()));
    }
    
    public boolean OrderImpl.validateObject(ConstraintValidatorContext context) {
        ConstraintViolationBuilder violation = null;

        if( !this.ensureItems() ) {
        	context.disableDefaultConstraintViolation();
        	violation = context.buildConstraintViolationWithTemplate("no.items");
        	violation.addConstraintViolation();
        }

        if( violation != null ) context.disableDefaultConstraintViolation();
        return violation != null ? false : true;
    }
    
    public boolean OrderImpl.validateObjectAgainstOthers(ConstraintValidatorContext context) {
        ConstraintViolationBuilder violation = null;

        if( !this.ensureStillNoItems() ) {
        	context.disableDefaultConstraintViolation();
        	violation = context.buildConstraintViolationWithTemplate("no.item");
        	violation.addConstraintViolation();
        }

        if( violation != null ) context.disableDefaultConstraintViolation();
        return violation != null ? false : true;
    }
    
    public boolean OrderImpl.validateChildren(ConstraintValidatorContext context) {
        ConstraintViolationBuilder violation = null;

        if( !this.ensureItemOk() ) {
        	context.disableDefaultConstraintViolation();
        	violation = context.buildConstraintViolationWithTemplate("item.invalid");
        	violation.addConstraintViolation();
        }

        if( violation != null ) context.disableDefaultConstraintViolation();
        return violation != null ? false : true;
    }
    
}
