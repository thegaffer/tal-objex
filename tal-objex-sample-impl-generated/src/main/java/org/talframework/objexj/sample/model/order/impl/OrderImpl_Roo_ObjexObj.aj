// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.model.order.impl;

import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.validation.ConstraintValidatorContext;
import javax.validation.ConstraintValidatorContext.ConstraintViolationBuilder;
import org.talframework.objexj.ObjexObj;
import org.talframework.objexj.ObjexObjStateBean;
import org.talframework.objexj.object.BaseObjexObj;
import org.talframework.objexj.object.ObjectUtils;
import org.talframework.objexj.object.StateBeanUtils;
import org.talframework.objexj.sample.api.order.OrderItem;
import org.talframework.objexj.sample.beans.order.OrderBean;
import org.talframework.objexj.validation.object.SelfChildValidator;
import org.talframework.objexj.validation.object.SelfInterObjectValidator;
import org.talframework.objexj.validation.object.SelfIntraObjectValidator;

privileged aspect OrderImpl_Roo_ObjexObj {
    
    declare parents: OrderImpl extends BaseObjexObj;
    
    declare parents: OrderImpl implements SelfIntraObjectValidator;
    
    declare parents: OrderImpl implements SelfInterObjectValidator;
    
    declare parents: OrderImpl implements SelfChildValidator;
    
    public OrderBean OrderImpl.getLocalState() {
        return bean;
    }
    
    public ObjexObjStateBean OrderImpl.getStateBean() {
        return bean;
    }
    
    public long OrderImpl.getAccount() {
        long rawValue = bean.getAccount();
        return cloneValue(rawValue);
    }
    
    public void OrderImpl.setAccount(long val) {
        long rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getAccount(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setAccount(rawValue);
    }
    
    public java.util.List<OrderItem> OrderImpl.getItems() {
        java.util.List<java.lang.String> rawValue = bean.getItems();
        return ObjectUtils.getObjectList(this, rawValue, OrderItem.class);
    }
    
    public OrderItem OrderImpl.getItemByIndex(int index) {
        List<String> refs = bean.getItems();
        if( refs != null && index >= 0 && index < refs.size() ) return ObjectUtils.getObject(this, refs.get(index), OrderItem.class);
        return null;
    }
    
    public void OrderImpl.removeItemById(Object id) {
        checkUpdateable();
        String ref = ObjectUtils.getObjectRef(this, id);
        List<String> refs = bean.getItems();
        if( refs == null || refs.size() == 0 ) return;
        int size = refs.size();
        Iterator<String> it = refs.iterator();
        while( it.hasNext() ) {
        	if( ref.equals(it.next()) ) {
        		ensureUpdateable(bean);
        		it.remove();
        	}
        }
        if( refs.size() == size ) return;
        ObjectUtils.removeObject(this, bean, ref);
    }
    
    public void OrderImpl.removeItemByIndex(int index) {
        checkUpdateable();
        List<String> refs = bean.getItems();
        if( refs == null || index < 0 || index >= refs.size() ) return;
        String ref = refs.get(index);
        ensureUpdateable(bean);
        refs.remove(index);
        ObjectUtils.removeObject(this, bean, ref);
    }
    
    public void OrderImpl.removeAllItems() {
        List<String> refs = bean.getItems();
        if( refs == null || refs.size() == 0 ) return;
        checkUpdateable();
        Iterator<String> it = refs.iterator();
        while( it.hasNext() ) {
        	String ref = it.next();
        	ObjectUtils.removeObject(this, bean, ref);
        	it.remove();
        }
        ensureUpdateable(bean);
        bean.setItems(null);
    }
    
    public OrderItem OrderImpl.createItem() {
        checkUpdateable();
        ObjexObj val = ObjectUtils.createObject(this, bean, "OrderItem");
        ensureUpdateable(bean);
        List<String> refs = bean.getItems();
        if( refs == null ) {
        	refs = new ArrayList<String>();
        	bean.setItems(refs);
        }
        refs.add(val.getId().toString());
        return val.getBehaviour(OrderItem.class);
    }
    
    public List<String> OrderImpl.getItemRefs() {
        java.util.List<java.lang.String> rawValue = bean.getItems();
        return rawValue;
    }
    
    public void OrderImpl.setItemRefs(List<String> val) {
        java.util.List<java.lang.String> rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getItems(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setItems(rawValue);
    }
    
    public OrderItem OrderImpl.getTest() {
        java.lang.String rawValue = bean.getTest();
        return ObjectUtils.getObject(this, rawValue, OrderItem.class);
    }
    
    public OrderItem OrderImpl.createTest(String type) {
        ensureUpdateable(bean);
        if( bean.getTest() != null ) ObjectUtils.removeObject(this, bean, bean.getTest());
        ObjexObj val = ObjectUtils.createObject(this, bean, type);
        bean.setTest(val.getId().toString());
        return val.getBehaviour(OrderItem.class);
    }
    
    public void OrderImpl.removeTest() {
        ensureUpdateable(bean);
        if( bean.getTest() != null ) ObjectUtils.removeObject(this, bean, bean.getTest());
    }
    
    public String OrderImpl.getTestRef() {
        java.lang.String rawValue = bean.getTest();
        return rawValue;
    }
    
    public void OrderImpl.setTestRef(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getTest(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setTest(rawValue);
    }
    
    public boolean OrderImpl.validateObject(ConstraintValidatorContext context) {
        ConstraintViolationBuilder violation = null;

        if( !this.ensureItems() ) {
        	context.disableDefaultConstraintViolation();
        	violation = context.buildConstraintViolationWithTemplate("no.items");
        	violation.addConstraintViolation();
        }

        if( violation != null ) context.disableDefaultConstraintViolation();
        return violation != null ? false : true;
    }
    
    public boolean OrderImpl.validateObjectAgainstOthers(ConstraintValidatorContext context) {
        ConstraintViolationBuilder violation = null;

        if( !this.ensureStillNoItems() ) {
        	context.disableDefaultConstraintViolation();
        	violation = context.buildConstraintViolationWithTemplate("no.item");
        	violation.addConstraintViolation();
        }

        if( violation != null ) context.disableDefaultConstraintViolation();
        return violation != null ? false : true;
    }
    
    public boolean OrderImpl.validateChildren(ConstraintValidatorContext context) {
        ConstraintViolationBuilder violation = null;

        if( !this.ensureItemOk() ) {
        	context.disableDefaultConstraintViolation();
        	violation = context.buildConstraintViolationWithTemplate("item.invalid");
        	violation.addConstraintViolation();
        }

        if( violation != null ) context.disableDefaultConstraintViolation();
        return violation != null ? false : true;
    }
    
}
