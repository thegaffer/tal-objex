// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.model.order.impl;

import java.lang.String;
import org.talframework.objexj.object.BaseObjexObj;
import org.talframework.objexj.object.ObjectUtils;
import org.talframework.objexj.object.StateBeanUtils;
import org.talframework.objexj.sample.api.stock.Product;
import org.talframework.objexj.sample.beans.order.OrderItemBean;

privileged aspect OrderItemImpl_Roo_ObjexObj {
    
    declare parents: OrderItemImpl extends BaseObjexObj;
    
    public OrderItemBean OrderItemImpl.getLocalState() {
        return bean;
    }
    
    public String OrderItemImpl.getRef() {
        java.lang.String rawValue = bean.getRef();
        return rawValue;
    }
    
    public void OrderItemImpl.setRef(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getRef(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setRef(rawValue);
    }
    
    public String OrderItemImpl.getName() {
        java.lang.String rawValue = bean.getName();
        return rawValue;
    }
    
    public void OrderItemImpl.setName(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getName(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setName(rawValue);
    }
    
    public String OrderItemImpl.getDescription() {
        java.lang.String rawValue = bean.getDescription();
        return rawValue;
    }
    
    public void OrderItemImpl.setDescription(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getDescription(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setDescription(rawValue);
    }
    
    public Product OrderItemImpl.getStockItem() {
        java.lang.String rawValue = bean.getStockItem();
        return ObjectUtils.getObject(this, rawValue, Product.class);
    }
    
    public void OrderItemImpl.setStockItem(Product val) {
        java.lang.String rawValue = ObjectUtils.getObjectRef(val);
        if( !StateBeanUtils.hasChanged(bean.getStockItem(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setStockItem(rawValue);
    }
    
    public String OrderItemImpl.getStockItemRef() {
        java.lang.String rawValue = bean.getStockItem();
        return rawValue;
    }
    
    public void OrderItemImpl.setStockItemRef(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getStockItem(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setStockItem(rawValue);
    }
    
    public double OrderItemImpl.getQuantity() {
        double rawValue = bean.getQuantity();
        return cloneValue(rawValue);
    }
    
    public void OrderItemImpl.setQuantity(double val) {
        double rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getQuantity(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setQuantity(rawValue);
    }
    
    public String OrderItemImpl.getMeasure() {
        java.lang.String rawValue = bean.getMeasure();
        return rawValue;
    }
    
    public void OrderItemImpl.setMeasure(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getMeasure(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setMeasure(rawValue);
    }
    
    public double OrderItemImpl.getPrice() {
        double rawValue = bean.getPrice();
        return cloneValue(rawValue);
    }
    
    public void OrderItemImpl.setPrice(double val) {
        double rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getPrice(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setPrice(rawValue);
    }
    
    public String OrderItemImpl.getCurrency() {
        java.lang.String rawValue = bean.getCurrency();
        return rawValue;
    }
    
    public void OrderItemImpl.setCurrency(String val) {
        java.lang.String rawValue = val;
        if( !StateBeanUtils.hasChanged(bean.getCurrency(), rawValue) ) return;
        ensureUpdateable(bean);
        bean.setCurrency(rawValue);
    }
    
}
