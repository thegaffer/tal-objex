// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.beans.stock;

import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.NotPersistent;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.talframework.objexj.ObjexID;
import org.talframework.objexj.ObjexObjStateBean;
import org.talframework.objexj.ObjexObjStateBean.ObjexFieldType;
import org.talframework.objexj.ObjexStateReader;
import org.talframework.objexj.ObjexStateWriter;
import org.talframework.objexj.object.StateBeanUtils;

privileged aspect CategoryBean_Roo_ObjexStateBean {
    
    declare parents: CategoryBean implements ObjexObjStateBean;
    
    declare @type: CategoryBean: @PersistenceCapable;
    
    declare @type: CategoryBean: @XmlRootElement;
    
    @PrimaryKey
    @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
    @Extension(vendorName = "datanucleus", key = "gae.encoded-pk", value = "true")
    private String CategoryBean.id;
    
    @Persistent(column = "parentId")
    private String CategoryBean.parentId;
    
    @NotPersistent
    private transient boolean CategoryBean._editable;
    
    public CategoryBean.new() {
        super();
        _editable = false;
    }

    @XmlAttribute
    @XmlID
    public String CategoryBean.getId() {
        return this.id;
    }
    
    public void CategoryBean.setId(String val) {
        if( this.id != null ) throw new IllegalArgumentException("You cannot set a parent ID on an object once it is set");
        this.id = val;
    }
    
    @XmlAttribute
    public String CategoryBean.getParentId() {
        return this.parentId;
    }
    
    public void CategoryBean.setParentId(String val) {
        if( this.parentId != null ) throw new IllegalArgumentException("You cannot set a parent ID on an object once it is set");
        this.parentId = val;
    }
    
    @XmlTransient
    public boolean CategoryBean.isEditable() {
        return _editable;
    }
    
    public void CategoryBean.setEditable() {
        _editable = true;
    }
    
    @XmlTransient
    public String CategoryBean.getObjexObjType() {
        return "Category";
    }
    
    public void CategoryBean.create(ObjexID parentId) {
        this.parentId = parentId != null ? parentId.toString() : null;
    }
    
    public void CategoryBean.preSave(Object id) {
        this.id = id != null ? id.toString() : null;
    }
    
    public ObjexObjStateBean CategoryBean.cloneState() {
        CategoryBean ret = new CategoryBean();
        ret.name = this.name;
        ret.description = this.description;
        ret.products = this.products;
        ret.categories = this.categories;
        ret.id = this.id;
        ret.parentId = this.parentId;
        return ret;
    }
    
    @XmlAttribute
    public String CategoryBean.getName() {
        return name;
    }
    
    public void CategoryBean.setName(String val) {
        name = val;
    }
    
    @XmlAttribute
    public String CategoryBean.getDescription() {
        return description;
    }
    
    public void CategoryBean.setDescription(String val) {
        description = val;
    }
    
    @XmlList
    public List<String> CategoryBean.getProducts() {
        return products;
    }
    
    public void CategoryBean.setProducts(List<String> val) {
        products = val;
    }
    
    @XmlList
    public List<String> CategoryBean.getCategories() {
        return categories;
    }
    
    public void CategoryBean.setCategories(List<String> val) {
        categories = val;
    }
    
    public void CategoryBean.updateTemporaryReferences(java.util.Map<ObjexID, ObjexID> refs) {
        parentId = StateBeanUtils.updateTempReferences(parentId, refs);
        products = StateBeanUtils.updateTempReferences(products, refs);
        categories = StateBeanUtils.updateTempReferences(categories, refs);
    }
    
    public void CategoryBean.acceptReader(ObjexStateReader reader) {
        name = reader.read("name", java.lang.String.class, ObjexFieldType.STRING, true);
        description = reader.read("description", java.lang.String.class, ObjexFieldType.STRING, true);
        products = reader.readReferenceList("products", ObjexFieldType.OWNED_REFERENCE, true);
        categories = reader.readReferenceList("categories", ObjexFieldType.OWNED_REFERENCE, true);
    }
    
    public void CategoryBean.acceptWriter(ObjexStateWriter writer, boolean includeNonPersistent) {
        writer.write("name", name, ObjexFieldType.STRING, true);
        writer.write("description", description, ObjexFieldType.STRING, true);
        writer.writeReferenceList("products", products, ObjexFieldType.OWNED_REFERENCE, true);
        writer.writeReferenceList("categories", categories, ObjexFieldType.OWNED_REFERENCE, true);
    }
    
}
