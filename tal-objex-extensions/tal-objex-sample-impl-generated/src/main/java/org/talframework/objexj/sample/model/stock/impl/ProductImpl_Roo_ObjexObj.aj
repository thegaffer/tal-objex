/**
 * Copyright (C) 2011 Tom Spencer <thegaffer@tpspencer.com>
 *
 * This file is part of Objex <http://www.tpspencer.com/site/objexj/>
 *
 * Objex is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Objex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Objex. If not, see <http://www.gnu.org/licenses/>.
 *
 * Note on dates: Objex was first conceived in 1997. The Java version
 * first started in 2004. Year in copyright notice is the year this
 * version was built. Code was created at various points between these
 * two years.
 */
// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.model.stock.impl;

import java.lang.String;
import java.util.Date;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.talframework.objexj.ObjexObjStateBean.ObjexFieldType;
import org.talframework.objexj.ObjexStateReader;
import org.talframework.objexj.object.BaseObjexObj;
import org.talframework.objexj.object.utils.SimpleFieldUtils;

privileged aspect ProductImpl_Roo_ObjexObj {
    
    declare parents: ProductImpl extends BaseObjexObj;
    
    declare @type: ProductImpl: @XmlType(name = "Product");
    
    declare @type: ProductImpl: @XmlAccessorType(XmlAccessType.NONE);
    
    public String ProductImpl.getType() {
        return "Product";
    }
    
    @XmlAttribute
    public String ProductImpl.getName() {
        String rawValue = bean.getName();
        String val = rawValue;
        return val;
    }
    
    public void ProductImpl.setName(String val) {
        String rawValue = val;
        bean.setName(SimpleFieldUtils.setSimple(this, bean, "name", rawValue, bean.getName()));
    }
    
    @XmlAttribute
    public String ProductImpl.getDescription() {
        String rawValue = bean.getDescription();
        String val = rawValue;
        return val;
    }
    
    public void ProductImpl.setDescription(String val) {
        String rawValue = val;
        bean.setDescription(SimpleFieldUtils.setSimple(this, bean, "description", rawValue, bean.getDescription()));
    }
    
    @XmlAttribute
    public Date ProductImpl.getEffectiveFrom() {
        Date rawValue = bean.getEffectiveFrom();
        Date val = rawValue;
        return val;
    }
    
    public void ProductImpl.setEffectiveFrom(Date val) {
        Date rawValue = val;
        bean.setEffectiveFrom(SimpleFieldUtils.setSimple(this, bean, "effectiveFrom", rawValue, bean.getEffectiveFrom()));
    }
    
    @XmlAttribute
    public Date ProductImpl.getEffectiveTo() {
        Date rawValue = bean.getEffectiveTo();
        Date val = rawValue;
        return val;
    }
    
    public void ProductImpl.setEffectiveTo(Date val) {
        Date rawValue = val;
        bean.setEffectiveTo(SimpleFieldUtils.setSimple(this, bean, "effectiveTo", rawValue, bean.getEffectiveTo()));
    }
    
    @XmlAttribute
    public double ProductImpl.getPrice() {
        double rawValue = bean.getPrice();
        double val = cloneValue(rawValue);
        return val;
    }
    
    public void ProductImpl.setPrice(double val) {
        double rawValue = val;
        bean.setPrice(SimpleFieldUtils.setSimple(this, bean, "price", rawValue, bean.getPrice()));
    }
    
    @XmlAttribute
    public String ProductImpl.getCurrency() {
        String rawValue = bean.getCurrency();
        String val = rawValue;
        return val;
    }
    
    public void ProductImpl.setCurrency(String val) {
        String rawValue = val;
        bean.setCurrency(SimpleFieldUtils.setSimple(this, bean, "currency", rawValue, bean.getCurrency()));
    }
    
    public void ProductImpl.acceptReader(ObjexStateReader reader) {
        String name = bean.getName();
        String new_name = reader.read("name", name, java.lang.String.class, ObjexFieldType.STRING, true);
        if( new_name != name ) setName(new_name);
        String description = bean.getDescription();
        String new_description = reader.read("description", description, java.lang.String.class, ObjexFieldType.STRING, true);
        if( new_description != description ) setDescription(new_description);
        Date effectiveFrom = bean.getEffectiveFrom();
        Date new_effectiveFrom = reader.read("effectiveFrom", effectiveFrom, java.util.Date.class, ObjexFieldType.DATE, true);
        if( new_effectiveFrom != effectiveFrom ) setEffectiveFrom(new_effectiveFrom);
        Date effectiveTo = bean.getEffectiveTo();
        Date new_effectiveTo = reader.read("effectiveTo", effectiveTo, java.util.Date.class, ObjexFieldType.DATE, true);
        if( new_effectiveTo != effectiveTo ) setEffectiveTo(new_effectiveTo);
        Double price = bean.getPrice();
        Double new_price = reader.read("price", price, double.class, ObjexFieldType.NUMBER, true);
        if( new_price != price ) setPrice(new_price);
        String currency = bean.getCurrency();
        String new_currency = reader.read("currency", currency, java.lang.String.class, ObjexFieldType.STRING, true);
        if( new_currency != currency ) setCurrency(new_currency);
    }
    
}
