/**
 * Copyright (C) 2011 Tom Spencer <thegaffer@tpspencer.com>
 *
 * This file is part of Objex <http://www.tpspencer.com/site/objexj/>
 *
 * Objex is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Objex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Objex. If not, see <http://www.gnu.org/licenses/>.
 *
 * Note on dates: Objex was first conceived in 1997. The Java version
 * first started in 2004. Year in copyright notice is the year this
 * version was built. Code was created at various points between these
 * two years.
 */
// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.model.stock.impl;

import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.talframework.objexj.ObjexObjStateBean.ObjexFieldType;
import org.talframework.objexj.ObjexStateReader;
import org.talframework.objexj.object.BaseObjexObj;
import org.talframework.objexj.object.utils.ReferenceListFieldUtils;
import org.talframework.objexj.object.utils.SimpleFieldUtils;
import org.talframework.objexj.object.xml.XmlObjexObj;
import org.talframework.objexj.sample.api.stock.Category;
import org.talframework.objexj.sample.api.stock.Product;

privileged aspect CategoryImpl_Roo_ObjexObj {
    
    declare parents: CategoryImpl extends BaseObjexObj;
    
    declare @type: CategoryImpl: @XmlType(name = "Category");
    
    declare @type: CategoryImpl: @XmlAccessorType(XmlAccessType.NONE);
    
    public String CategoryImpl.getType() {
        return "Category";
    }
    
    @XmlAttribute
    public String CategoryImpl.getName() {
        String rawValue = bean.getName();
        String val = rawValue;
        return val;
    }
    
    public void CategoryImpl.setName(String val) {
        String rawValue = val;
        bean.setName(SimpleFieldUtils.setSimple(this, bean, "name", rawValue, bean.getName()));
    }
    
    @XmlAttribute
    public String CategoryImpl.getDescription() {
        String rawValue = bean.getDescription();
        String val = rawValue;
        return val;
    }
    
    public void CategoryImpl.setDescription(String val) {
        String rawValue = val;
        bean.setDescription(SimpleFieldUtils.setSimple(this, bean, "description", rawValue, bean.getDescription()));
    }
    
    @XmlElement(type = XmlObjexObj.class)
    public java.util.List<Product> CategoryImpl.getProducts() {
        return ReferenceListFieldUtils.getList(this, Product.class, bean.getProducts());
    }
    
    public void CategoryImpl.setProducts(java.util.List<Product> val) {
        bean.setProducts(ReferenceListFieldUtils.setList(this, bean, bean.getProducts(), val, true));
    }
    
    public Product CategoryImpl.getProductByIndex(int index) {
        return ReferenceListFieldUtils.getElementByIndex(this, Product.class, bean.getProducts(), index);
    }
    
    public Product CategoryImpl.createProduct() {
        String type = "Product";
        Product val = ReferenceListFieldUtils.createElement(this, bean, Product.class, type);
        bean.setProducts(ReferenceListFieldUtils.addElement(this, bean, bean.getProducts(), val));
        return val;
    }
    
    public void CategoryImpl.removeProductByIndex(int index) {
        bean.setProducts(ReferenceListFieldUtils.removeElementByIndex(this, bean, bean.getProducts(), true, index));
    }
    
    public void CategoryImpl.removeProductById(Object id) {
        bean.setProducts(ReferenceListFieldUtils.removeElementById(this, bean, bean.getProducts(), true, id));
    }
    
    public void CategoryImpl.removeAllProducts() {
        bean.setProducts(ReferenceListFieldUtils.removeAll(this, bean, bean.getProducts(), true));
    }
    
    public List<String> CategoryImpl.getProductRefs() {
        List<String> rawValue = bean.getProducts();
        List<String> val = rawValue;
        return val;
    }
    
    public void CategoryImpl.setProductRefs(List<String> val) {
        List<String> rawValue = val;
        bean.setProducts(SimpleFieldUtils.setSimple(this, bean, "ProductRefs", rawValue, bean.getProducts()));
    }
    
    @XmlElement(type = XmlObjexObj.class)
    public java.util.List<Category> CategoryImpl.getCategories() {
        return ReferenceListFieldUtils.getList(this, Category.class, bean.getCategories());
    }
    
    public void CategoryImpl.setCategories(java.util.List<Category> val) {
        bean.setCategories(ReferenceListFieldUtils.setList(this, bean, bean.getCategories(), val, true));
    }
    
    public Category CategoryImpl.getCategoryByIndex(int index) {
        return ReferenceListFieldUtils.getElementByIndex(this, Category.class, bean.getCategories(), index);
    }
    
    public Category CategoryImpl.createCategory() {
        String type = "Category";
        Category val = ReferenceListFieldUtils.createElement(this, bean, Category.class, type);
        bean.setCategories(ReferenceListFieldUtils.addElement(this, bean, bean.getCategories(), val));
        return val;
    }
    
    public void CategoryImpl.removeCategoryByIndex(int index) {
        bean.setCategories(ReferenceListFieldUtils.removeElementByIndex(this, bean, bean.getCategories(), true, index));
    }
    
    public void CategoryImpl.removeCategoryById(Object id) {
        bean.setCategories(ReferenceListFieldUtils.removeElementById(this, bean, bean.getCategories(), true, id));
    }
    
    public void CategoryImpl.removeAllCategories() {
        bean.setCategories(ReferenceListFieldUtils.removeAll(this, bean, bean.getCategories(), true));
    }
    
    public List<String> CategoryImpl.getCategoryRefs() {
        List<String> rawValue = bean.getCategories();
        List<String> val = rawValue;
        return val;
    }
    
    public void CategoryImpl.setCategoryRefs(List<String> val) {
        List<String> rawValue = val;
        bean.setCategories(SimpleFieldUtils.setSimple(this, bean, "CategoryRefs", rawValue, bean.getCategories()));
    }
    
    public void CategoryImpl.acceptReader(ObjexStateReader reader) {
        String name = bean.getName();
        String new_name = reader.read("name", name, java.lang.String.class, ObjexFieldType.STRING, true);
        if( new_name != name ) setName(new_name);
        String description = bean.getDescription();
        String new_description = reader.read("description", description, java.lang.String.class, ObjexFieldType.STRING, true);
        if( new_description != description ) setDescription(new_description);
        List<String> products = bean.getProducts();
        List<String> new_products = reader.readReferenceList("products", products, ObjexFieldType.OWNED_REFERENCE, true);
        if( new_products != products ) setProductRefs(new_products);
        List<String> categories = bean.getCategories();
        List<String> new_categories = reader.readReferenceList("categories", categories, ObjexFieldType.OWNED_REFERENCE, true);
        if( new_categories != categories ) setCategoryRefs(new_categories);
    }
    
}
