/**
 * Copyright (C) 2011 Tom Spencer <thegaffer@tpspencer.com>
 *
 * This file is part of Objex <http://www.tpspencer.com/site/objexj/>
 *
 * Objex is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Objex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Objex. If not, see <http://www.gnu.org/licenses/>.
 *
 * Note on dates: Objex was first conceived in 1997. The Java version
 * first started in 2004. Year in copyright notice is the year this
 * version was built. Code was created at various points between these
 * two years.
 */
// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.talframework.objexj.sample.beans.order;

import java.lang.Object;
import java.lang.String;
import java.util.List;
import javax.jdo.annotations.Extension;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.NotPersistent;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.jdo.annotations.PrimaryKey;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import org.talframework.objexj.ObjexID;
import org.talframework.objexj.ObjexObjStateBean;
import org.talframework.objexj.ObjexObjStateBean.ObjexFieldType;
import org.talframework.objexj.ObjexStateReader;
import org.talframework.objexj.ObjexStateWriter;
import org.talframework.objexj.object.utils.StateBeanUtils;
import org.talframework.util.beans.BeanComparison;

privileged aspect OrderBean_Roo_ObjexStateBean {
    
    declare parents: OrderBean implements ObjexObjStateBean;
    
    declare @type: OrderBean: @PersistenceCapable;
    
    declare @type: OrderBean: @XmlRootElement;
    
    @PrimaryKey
    @Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
    @Extension(vendorName = "datanucleus", key = "gae.encoded-pk", value = "true")
    private String OrderBean.id;
    
    @Persistent(column = "parentId")
    private String OrderBean.parentId;
    
    @NotPersistent
    private transient boolean OrderBean._editable;
    
    @NotPersistent
    private transient int OrderBean.setFields;
    
    @NotPersistent
    private transient int OrderBean.changedFields;
    
    public OrderBean.new() {
        super();
        _editable = false;
    }

    @XmlAttribute
    @XmlID
    public String OrderBean.getId() {
        return this.id;
    }
    
    public void OrderBean.setId(String val) {
        if( this.id != null ) throw new IllegalArgumentException("You cannot set a parent ID on an object once it is set");
        this.id = val;
    }
    
    @XmlAttribute
    public String OrderBean.getParentId() {
        return this.parentId;
    }
    
    public void OrderBean.setParentId(String val) {
        if( this.parentId != null ) throw new IllegalArgumentException("You cannot set a parent ID on an object once it is set");
        this.parentId = val;
    }
    
    @XmlTransient
    public boolean OrderBean.isEditable() {
        return _editable;
    }
    
    public void OrderBean.setEditable() {
        _editable = true;
    }
    
    @XmlTransient
    public String OrderBean.getObjexObjType() {
        return "Order";
    }
    
    public void OrderBean.create(ObjexID parentId) {
        this.parentId = parentId != null ? parentId.toString() : null;
    }
    
    public void OrderBean.preSave(Object id) {
        this.id = id != null ? id.toString() : null;
    }
    
    public ObjexObjStateBean OrderBean.cloneState() {
        OrderBean ret = new OrderBean();
        ret.account = this.account;
        ret.items = this.items;
        ret.test = this.test;
        ret.id = this.id;
        ret.parentId = this.parentId;
        return ret;
    }
    
    public String OrderBean.toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("OrderBean: { ");
        builder.append("id=").append(getId());
        builder.append("parentId=").append(getParentId());
        builder.append("account=").append(account);
        builder.append("items=").append(items);
        builder.append("test=").append(test);
        return builder.append(" }").toString();
    }
    
    public int OrderBean.hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getId() == null) ? 0 : getId().hashCode());
        result = prime * result + ((getParentId() == null) ? 0 : getParentId().hashCode());
        long account_temp = Double.doubleToRawLongBits(account);
        result = prime * result + (int)(account_temp ^ (account_temp >>> 32));
        result = prime * result + ((items == null) ? 0 : items.hashCode());
        result = prime * result + ((test == null) ? 0 : test.hashCode());
        return result;
    }
    
    public boolean OrderBean.equals(Object obj) {
        OrderBean other = BeanComparison.basic(this, obj);
        boolean same = other != null;
        if( same ) {
        	same = BeanComparison.equals(same, getId(), other.getId());
        	same = BeanComparison.equals(same, getParentId(), other.getParentId());
        	same = BeanComparison.equals(same, account, other.account);
        	same = BeanComparison.equals(same, items, other.items);
        	same = BeanComparison.equals(same, test, other.test);
        }
        return same;
    }
    
    public long OrderBean.getAccount() {
        return account;
    }
    
    public void OrderBean.setAccount(long val) {
        setFields |= 1;
        account = val;
    }
    
    public boolean OrderBean.isAccountSet() {
        return (setFields & 1) > 0;
    }
    
    public boolean OrderBean.isAccountChanged() {
        return (changedFields & 1) > 0;
    }
    
    public List<String> OrderBean.getItems() {
        return items;
    }
    
    public void OrderBean.setItems(List<String> val) {
        setFields |= 2;
        items = val;
    }
    
    public boolean OrderBean.isItemsSet() {
        return (setFields & 2) > 0;
    }
    
    public boolean OrderBean.isItemsChanged() {
        return (changedFields & 2) > 0;
    }
    
    public String OrderBean.getTest() {
        return test;
    }
    
    public void OrderBean.setTest(String val) {
        setFields |= 4;
        test = val;
    }
    
    public boolean OrderBean.isTestSet() {
        return (setFields & 4) > 0;
    }
    
    public boolean OrderBean.isTestChanged() {
        return (changedFields & 4) > 0;
    }
    
    public void OrderBean.updateTemporaryReferences(java.util.Map<ObjexID, ObjexID> refs) {
        parentId = StateBeanUtils.updateTempReferences(parentId, refs);
        items = StateBeanUtils.updateTempReferences(items, refs);
        test = StateBeanUtils.updateTempReferences(test, refs);
    }
    
    public void OrderBean.acceptReader(ObjexStateReader reader) {
        account = reader.read("account", account, long.class, ObjexFieldType.NUMBER, true);
        items = reader.readReferenceList("items", items, ObjexFieldType.OWNED_REFERENCE, true);
        test = reader.readReference("test", test, ObjexFieldType.OWNED_REFERENCE, true);
    }
    
    public void OrderBean.acceptWriter(ObjexStateWriter writer, boolean includeNonPersistent) {
        writer.write("account", account, ObjexFieldType.NUMBER, true);
        writer.writeReferenceList("items", items, ObjexFieldType.OWNED_REFERENCE, true);
        writer.writeReference("test", test, ObjexFieldType.OWNED_REFERENCE, true);
    }
    
}
