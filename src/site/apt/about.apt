~~
~~ Copyright (C) 2011 Tom Spencer <thegaffer@tpspencer.com>
~~
~~ This file is part of Objex <http://www.tpspencer.com/site/objexj/>
~~
~~ Objex is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~
~~ Objex is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~
~~ You should have received a copy of the GNU General Public License
~~ along with Objex. If not, see <http://www.gnu.org/licenses/>.
~~
~~ Note on dates: Objex was first conceived in 1997. The Java version
~~ first started in 2004. Year in copyright notice is the year this
~~ version was built. Code was created at various points between these
~~ two years.
~~

  Objex is a long-term personal project for me. It was conceived in the mid to late
  nineties after constructing my first software project. The ideas within it are to solve
  a number of issues I found. Indeed the ideas were formed fairly early on and I am
  still working on implementing those ideas!
  
  Without going to to loads of details, here are those issues I faced. Before I list them
  you do need to understand my route into IT was, shall we say, ad-hoc. I have basically
  started with an OO appoach and then discovered things like relational databases some
  time afterwards. What I am trying to say is some of these issues might seem quite niave!
  
* OO Approach

  The first issue is simply the mismatch between the OO approach and a relational database.
  Simply that state and behaviour belong together! Following the relational approach too
  much will encourage this more data centric approach to your data. 
  
  Really I want to define my domain objects, including state, behaviour and relationships
  and then have that persisted away irrespective of any 'schema' that is used to do this
  (of course arguably there might not be a schema). 

* Relationships

  Taking this a step further the next part of my view of the OO approach is that it 
  encourages relationships to be formed between Objects. Relationships are important before
  Objects because it allows, at the very least, a 'user' or 'agent' to follow the relationships
  to make sense of the data, i.e. to turn it into information.  
  
  A relational approach can discourage this for a number of reasons.
  
  Firstly relationships are very specific, there is no concept of a generic relationship
  in a relational database. You have to specifically link two tables together via a foreign
  key. This means that both sides of the relationship need to know some intimate details
  of each other - specifically how each is identifiable. What I really envisage is there is
  a way to form a relationship between any two objects without them neccessarily needing to
  know about one another.
  
  Secondly forming relationships between objects is typically the wrong way round. For
  instance if I have an Order 'object' it would be natural to follow a relationship to
  the 'order items' of that order. In a relational DB the relationship is the other way
  around - the order item points to the order.
  
  I know that ORM frameworks have made this somewhat easier, but they still force you to 
  think about how the relationships are formed and require the relationships to be
  explicitly expressed in your schema - and that means it will be difficult to change your
  mind later.

* Documents

  The next issue in concept I have is that naturally in enterprises we talk in terms of 
  documents. So I may have many instances of a Order document according to how much business
  I have done. I probably have some special one-off documents, like our Stock catalog and
  I call these stores.
  
  However, a relational database encourages all the data to sit together. So imagine a 
  relational database, given the points above, all order items in all orders ever made sit
  inside a table together. The speed of accessing the order items for any order is a function
  of the amount of order items there have ever been.
  
  I think this is wrong for most transactional systems. It is clearly the right approach for
  a data mining/warehouse type environment. I should be able to access from my transactional
  system every document, but once I've got a document the speed to access it should not,
  in an ideal world, take time proportional to the total number of all orders and order items. 

* Changing Persistence

  Taking this a step further, the relational database encourages all data to be stored
  together. And if you follow the relational model into your systems that will be integral
  to your application.
  
  But ... I think you should be able to pick and choose and even mix and match persistence
  strategies for different types of documents and stores. Use too much of the relational
  model in your apps and you will not be able to do this.


  