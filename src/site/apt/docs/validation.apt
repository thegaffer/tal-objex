How To Implement Validation

  This page details how to provide validation in your Objex objects.
  
Validation Lifecycle

  Firstly we need to understand what exactly is the validation lifecycle
  inside Objex. Objex tries to run a pretty tight ship when it comes to
  validation and will not let you save an invalid container. However, you
  are always in charge of what constitutes an invalid container.
  
  There are 4 types of validation ...
  
    [[a]] Field Validation is applied when setting fields. Field validation
    takes no account of any other values. It just won't let you change a
    value to something that's invalid.
    
    [[b]] Intra Object Validation means that each field should be valid 
    in combination - so if you have a town you must have a country, but
    otherwise either can be null.
    
    [[c]] Inter Object Validation means that the object as a whole should
    be valid when considered against other objects inside the container.
    
    [[d]] Parent Object Validation applies to a parent object that itself
    might not be changing, but is asked if it's children (at least one of
    which has changed) are valid.
    
  Field validation occurs whenever you try and change a field, whereas
  the other levels are applied when you save a container. You can also
  request validation on the container or on the objects at any of the 
  levels above.
  
Enrichment

  A quick word on Enrichment. Often validation and enrichment go hand in hand
  together. Particularly when you enrich domain objects from other, external,
  sources. 
  
  For instance given an account number you might go off during
  validation to check that account is valid by getting a unique internal
  reference which you then hold on to. Although purists may argue these are
  two different concerns it seems particularly silly to make two calls to
  the same thing just to keep enrichment and validation separate. 
  
  If that idea floats your boat then by all means keep them separate, but if
  not then the recommended approach is to apply enrichment, when possible, 
  directly when the field changes. However, you should not make external calls at 
  this time otherwise performance will suffer. Therefore, we recommend clearing
  enriched fields as soon as possible and then performing the full enrichment
  as part of the intra/inter validation when that is called.
  

Manual Approach

  You can implement validation with entirely custom code. Inside your 
  ObjexObj object you simply implement validate. This following
  demonstrates this...
  
+--

+--

Generator Approach

  The generators attempt to make your life slightly easier by generating
  a lot of the validation code. It does this by generating a set of 
  ValidationRule instances. Each validation rule applies to a particular
  validation level and tests a particular condition.
  
  // TODO: Validation annotations and rules.  

Performance

  A final note on performance. If nothing changes inside a container then
  it should not take very long to perform a validate. In particular you should
  not go off to external sources for validation when nothing has changed.
  
  To actually implement this will take quite a bit of design. For instance you
  might need to hold checksum values that you set to indicate a field is valid
  and then clear them when ever a real field the rule is dependent on changes.