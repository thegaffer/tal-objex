The 10 Minute Domain
 
  I am not sure this is really going to take 10 minutes, but this page details how
  to create a document in Objex.
  
  I would however encourage to spend some time reading 
  {{{understanding.html}Understanding Objex}} page to get a grip of what Objex is
  all about - doing so will definitely blow the 10 minutes claim though!

Scenario

  We are going to take one of the sample projects here. Specifically we are going
  to build an 'Order' document that represents an order a customer has made.
  
  Here are the objects we will be building and their role in the system.
  
    * Order Object - the root object holding everything else and the orders state
    
    * Customer Object - holding details about the customer we are selling to
    
    * Address Object - holding an address, we use this both for the shipping and
    invoice addresses
    
    * Product Item - holding details of a product we are selling to the customer
    
    * Service Item - holding details of a service we are providing to the customer
  
  Each of these items will have an interface (Order, Customer, Product etc). The
  Product and Service item will also implement a separate interface Order Item, 
  this allows us to treat all types of things we sell to the customer as simply an
  item on the order.
  
Object Model

  The following class diagram depicts the class model we are going to produce:
  
  << To-do: The Object Model >>
  
Steps

  Before we go on, lets just review the steps we are going to make:
  
  [[1]] Create our Project using the Archetypes
  
  [[2]] Create the objects (listed above)
  
  [[3]] Create the interfaces from the objects and adjust the objects to
  only use the interfaces when referencing each other. 
  
  [[4]] Describe the Container and it's Objects so that default container
  and factory instances can use it.
  
  [[5]] Test our Container using the simple in-memory runtime environment
  
  [[6]] Create and implement traditional Domain Service and Repository 
  interfaces so we can completely hide all Objex artefacts from our clients.
  
Step 1 - Create the Project

  An Objex Container will be implemented inside a project that produces a
  JAR archive - so a simple Maven project will suffice. You may elect to
  produce each container in it's own project so they can evolve separately
  more easily, although in the samples that are part of Object we implement
  multiple containers inside 1 project.
  
  You can just create a simple Maven project, but because there are some
  dependencies on Objex we've created a Maven Archetype for an Objex jar.
  So to create the project issue the following command ...
  
+--
TODO: Maven command
+--

Step 2 - Create the Objects

  Now we should create the Objects. These should start life as simple JavaBean
  type objects. Below is the basic shell for each of these objects with
  member variables for each property. I've marked the classes with the
  @IdentityObject annotation. This is not strictly needed, but it tells Objex
  that any instance of the class has identity within its container. 
  
  Note: I am showing the objects with their member variables, but I am not 
  showing each any every accessor/mutator or the standard hashCode, equals
  and toString methods - if you using Eclipse these can largely be generated!
  
  The Order object that is the root object in each container:
  
+--
package your.namespace.order.objects;

@IdentityObject
public class OrderImpl {
	/** Holds some status for the order (e.g. DRAFT, ORDERED, COMPLETED) */
	private String status;
	/** Holds the date the order was created on */
	private Date created;
	/** Member holds details about the customer */
	private Customer customer;
	/** Member holds all of the order items */
	private List<OrderItem> orderItems;
	
	public Customer getCustomer() { ... }
	public void setCustomer(Customer customer) { ... }

	... Other getters setters
	
	@Override public int hashCode() { ... base this on your properties }
	@Override public boolean equals(Object obj) { ... }
	@Override public String toString() { ... } 
}
+--

  Note: The interfaces Customer & OrderItem has not yet been defined - see below.
  
  The Customer object that describes who we are selling to:

+--
package your.namespace.order.objects;

@IdentityObject
class CustomerImpl {

	/** The legal name of this company */
	private String name;
	/** The reference number of the company */
	private String ref;
	

	/** The address of the customer */
	private Address customerAddress;
	/** The addres we are shipping any goods to */
	private Address shippingAddress;
	
	... Std JavaBean Accessor/Mutator for each member
	... hashCode, equals and toString() as above
}
+--

  The Address object describes an address. It should be noted that many will see
  this not as an object that has identity, but one that is identified by its state,
  i.e. is an immutable value object. I would have some sympathy with this view, but
  for the purpose of this demonstration I am leaving it as an IdentityObject. 

+--
package your.namespace.order.objects;

@IdentityObject
class AddressImpl {
	/** Holds address line 1 */
	private String line1;
	/** Holds address line 2 */
	private String line2;
	/** Holds address line 3 */
	private String line3;
	/** Holds town */
	private String town;
	/** Holds provice */
	private String province;
	/** Holds postal code */
	private String postCode;
	/** Holds country */
	private String country;
	
	... Std JavaBean Accessor/Mutator for each member
	... hashCode, equals and toString() as above
}
+--

  A ProductItem describes us selling a specific product from our catalog:

+--
package your.namespace.order.objects;

@IdentityObject
class ProductItemImpl {
	/** Holds the reference of this item */ 
	private String ref;
	/** Holds the product reference */
	private String productRef;
	/** Holds the name of this item */
	private String name;
	/** Holds the fuller description of this item */
	private String description;
	/** Holds the quantity required*/
	private double quantity;
	/** Holds the measurement of the quantiy (m, kg, m2 etc)
	private String quantityMeasure;
	/** Holds the price */
	private double price;
	/** Holds the currency */
	private String currency;
	
	... Std JavaBean Accessor/Mutator for each member
	... hashCode, equals and toString() as above
}
+--

  A ServiceItem describes us selling some service that we will perform:

+--
package your.namespace.order.objects;

@IdentityObject
class ServiceItemImpl {
	/** Holds the reference of this item */ 
	private String ref;
	/** Holds the name of this item */
	private String name;
	/** Holds the fuller description of this item */
	private String description;
	/** Holds the price */
	private double price;
	/** Holds the currency */
	private String currency;
	
	... Std JavaBean Accessor/Mutator for each member
	... hashCode, equals and toString() as above
}
+--

  In addition to creating accessor/mutator methods and the standard hashCode,
  equals and toString() methods you might also add:
  
    * Add in any JSR 303 annotations for validation.
    
    * Add in any behavioural objects, for instance confirm() on the order
    object to put it into a confirmed state.
    
  The hashCode() is very important as it is via this that typically changes
  are detected in your objects. If you object says it hasn't changed (via the
  hashCode() then don't expect it to be saved!
  
Step 3 - Create the Interfaces

  So now we've got the basic classes, we need to create their primary interfaces
  and ensure we reference different objects through their interfaces. To do this
  extract an interface from each of our objects above taking accross all of the
  accessor/mutator methods and any behavioural methods you added. For instance:
  
+--
package your.namespace.order.api;

public interface Order {
	public String getStatus();
	public Date getDate();
	
	public Customer getCustomer();
	public void setCustomer(Customer customer);
	
	public List<OrderItem> getOrderItems();
	public void setOrderItems(List<OrderItem> items);
}
+--

  Notice that for status and date I have only exposed getter methods. This is
  fine and how you control outside access because clients will only be able
  to get to your objects via their interfaces.
  
  Do similar for the other objects so we end up in the same package as Order 
  with:
  
    * public interface Customer
    
    * public interface Address
    
    * public interface ProductItem
    
    * public interface ServiceItem
    
  In addition lets create the OrderItem interface so that we can deal with 
  any order item generically regardless of whether it is a product or a 
  service.
  
+--
package your.namespace.order.api;

public interface OrderItem {
	public String getRef();
	public String getDescription();
	public String getUnits();
	public String getPrice();
}
+-- 

  Notice here that we are exposing getters here. In our simple system it does
  not make sense for a generic interface to expose setters - but there is no
  restriction - i.e. you can happily have setters and other methods with
  side effects on your generic interfaces.
  
  As a final optimisation lets make ProductItem and ServiceItem extend from
  OrderItem and only add the extra bits on.
  
  It should be noted that aside from getting at the Order object you use
  these interfaces exclusively.

Step 4 - Describe your Objects and Container

  It is possible to create your own Objex Container. However, a basic one is
  provided which is suitable for most means. It clearly separates the actual
  persistence of the container into what it calls a middleware. Via this
  mechanism you can specify what the datasource for your container dynamically.
  
  In order to use the basic container you must describe your objects the
  container as a whole. The involves placing some annotations on your objects
  and then constructing a ContainerStrategy object.
  
  We have already marked our objects as Identity objects using the
  @IdentityObject annotation. This is going to tell Objex that this object has
  an ID and should be saved. But, we also need to describe a little more the
  relationships between the two objects. Specifically we need to say whether
  the relationship is an owned relationship (i.e. 1 object owns another) or
  an unowned relationship (i.e. 1 object just references another). There is
  no way to pick this up from the Java code directly so we need to add another
  annotation to describe this.
  
  Relationship annotations are added to the getter methods on the source object,
  so for Order this will be:
  
+--
package your.namespace.order.objects;

import org.talframework.domain.annotations.IdentityObject;
import org.talframework.domain.annotations.ChildProperty;

@IdentityObject
public class OrderImpl {
  ... Member variables
  
  @ChildProperty(Customer.class)
  public Customer getCustomer() { ... }
  
  ...
  
  @ChildProperty(OrderItem.class)
  public List<OrderItem> getOrderItems() { ... }
}
+--

  All of our relationships in this example are owned relationships so we mark 
  with the child property. You don't have to do anything special to, for instance
  an OrderItem, you just add it to OrderItems on the Order object and Objex will
  understand this and form the relationship. The parameter passed is the base
  interface you expect the object to expose - it is re-stated because the 
  information in the generic template parameters for a List, Set or Map can be
  lost.
  
  You also need to add annotations to the customer object
  
+--
package your.namespace.order.objects;

import org.talframework.domain.annotations.IdentityObject;
import org.talframework.domain.annotations.ChildProperty;

@IdentityObject
class CustomerImpl {
  ... Member variables

  @ChildProperty(Address.class)
  public Address getCustomerAddress() { ... }

  @ChildProperty(Address.class)
  public Address getShippingAddress() { ... }
  
  ... 
}
+--

  If you do have any unowned relationships these are marked with the 
  @ReferenceProperty annotation. It is exactly the same otherwise as
  the ChildProperty.
  
  Now we've done that we can create the strategy objects that will define
  our container to the pre-built container implementation. This is piece
  of configuration and although it is shown in code below could easily
  be put into a configuration file/technology as required:
  
+--
ContainerStrategy strategy = new SimpleContainerStrategy(
		"Order",	/* The name of the container type, Order in this case */ 
		"Order",	/* The name of the root object, very often the same for documents, but can be different */
		/* A variable list of ObjectStrategies for each type of object we can have ... */
		DefaultObjectStrategy.calculateStrategy("Order", OrderImpl.class, true),
		DefaultObjectStrategy.calculateStrategy("Customer", CustomerImpl.class, true),
		DefaultObjectStrategy.calculateStrategy("Address", AddressImpl.class, true),
		DefaultObjectStrategy.calculateStrategy("ProductItem", ProductItemImpl.class, true),
		DefaultObjectStrategy.calculateStrategy("ServiceItem", ServiceItemImpl.class, true));
+--

  We will see us using the strategy object below.

Step 5 - Test the Container

  In order to test the container if we are using the default Container 
  implementation we must provide a runtime environment. The runtime environment
  provides a bridge between the Objex world and any data storage. Objex
  calls this bridge the middleware.
  
  There is a test implementation of the middleware interface that simply
  holds the state of objects in a container in memory. So we will use this. To
  connect the test middleware to the container we define a ContainerFactory.
  The following code shows this, but it is configuration so that can easily
  be done via a configuration tool. You should only create your factories
  once!
  
+--
/// Our middleware factory that will fetch the objects from memory
ContainerMiddlewareFactory middlewareFactory = new InMemoryMiddlewareFactory();
        
// Our container factory that we use to get our orders from
ContainerFactory orderFactory = new SimpleContainerFactory(strategy, middlewareFactory);
+--

  There are other middlewares as part of the runtime package in Objex and you
  can write your own. The In Memory one is neat because it requires no 
  dependencies.

  That done lets look at some simple use cases. First to create:
  
+--
// Create the order (nothing is persisted at this point)
Container newOrder = orderFactory.create();

// Get the order domain object
Order order = newOrder.getRootObject().getBehaviour(Order.class);

// Now use it
order.setCustomer(new CustomerImpl());
order.getCustomer().setName("Test Co");
...
order.getOrderItems().add(new ProductItem());
order.getOrderItems().get(0).setRef("1");
order.getOrderItems().get(0).setDescription("Our lively widget product");
...

// Finally when we are ready
String orderId = newOrder.save();
+--

  If we want to get hold of an existing order:
  
+--
Container existingOrder = orderFactory.get(orderId);
Order order = newOrder.getRootObject().getBehaviour(Order.class);

// Now use order naturally via its methods
// Note: We have only got the container read only so the following would fail:
order.getCustomer().setName("I cannot do this");

// Instead you would open the container
existingOrder.open();

// ... Now make your changes

existingOrder.save(); 
+--

  I'll leave it as an exercise for you to write a test here.
  
Step 6 - Adding Custom Service/Repository Interfaces

  The final point that I want to make - though I will not show it - is that is
  is relatively easy to create a complete non-Objex facade over a container.
  Often this is called a Repository, and a Service to serve up the repositories.
  
  Doing this lets you be totally non-Objex specific in all your code except
  the implementations of the repository and the service - both of which are
  fairly trivial. 
  
  Note: I am not saying you have to create such interfaces to completely hide
  Objex, but you are free to do so. It is your choice.
  
  The examples are in the samples project.
  
Summary

  So that's it. A very simple Order document described in Java objects with a 
  few extra annotations to describe the relationships. We can now plug in any
  runtime engine to save that document to GlobalsDB, Google App Engine, dare I
  say it, a Relational Database! 
  
  Nothing changes inside your objects when you do this - exactly as it should
  be.
  
  Enjoy!