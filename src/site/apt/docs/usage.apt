Using Objex

 The Integration tests that are part of the sample application provide the
 best demonstration to using Objex.
 
Basic
 
 Using an objex container uses the following:
 
  * Get an objex container by either creating it, getting an existing one
  or opening an existing one
  
  * Get the root object from the container as an instance of your own
  business interface.
  
  * Interact with your objects, if the container is open then change the
  values.
  
  * Discard the container or save it if changes have been made.
  
 The following example shows this when opening a container:
 
+--
// 1. Open the container
Container existingOrder = orderFactory.open(orderId);

// 2. Get the root object 
Order order = newOrder.getRootObject().getBehaviour(Order.class);

// 3. Now interact with the objects (not Objex specific)
order.getCustomer().setName("NewWidgetCo");
// ...

// 4. Save the container
existingOrder.save(); 
+--

Adding Objects

 One thing that can often be difficult to see is how I create new objects
 in a Document or Store. Simple, just add it:
 
+--
Container existingOrder = orderFactory.open(orderId);
Order order = existingOrder.getRootObject().getBehaviour(Order.class);

// Simply add a new item at the relevant point
order.getOrderItems().add(new ProductItemImpl());

existingOrder.save(); 
+--

 The object you pass in (new ProductItemImpl) is called a seed object.
 It is not used directly, but it's type is used to determine what type of
 object to create. Also any properties it holds are copied over into the
 new instance. But, if you immediately got the object back it would be
 different:
 
+--
OrderItem seed=new ProductItemImpl();
seed.setDescription("Testing");
order.getOrderItems().add(seed);
OrderItem newItem = order.getOrderItems().get(0); // Assume none existing before call

assertEquals(seed, newItem);						// This test would FAIL!
assertTrue(newItem instanceof ProductItem);			// This test would SUCCEED
assertEquals("Testing", newItem.getDescription());	// This test would SUCCEED
assertTrue(newItem instanceof ObjexObj);			// This test would SUCCEED!!
+-- 

 The last line often gets people - ProductItemImpl does not implement ObjexObj!

Using ObjexObj

 All objects inside a container will expose the ObjexObj interface. Your free to
 use this interface if you so wish. It offers the following services:
 
  * Ability to get or set any property by name
  
  * Ability to get the objects ID in the container
  
  * Ability to get the objects parent object or the container
  
  * Ability to invoke the validate method. This is called by the container
  when you save, but you can use it yourself.
  
 For instance:
 
+--
Container existingOrder = orderFactory.get(orderId);
Order order = existingOrder.getRootObject().getBehaviour(Order.class);

OrderItem item = order.getOrderItems().get(0);

ObjexObj objexItem = (ObjexObj)item;
ObjexID id = objexItem.getId();				// The objects ID

ObjexObj parent = objexItem.getParent();
assertEquals(order, parent);				// This should PASS

Container container = objexItem.getContainer();
assertEquals(container, existingOrder);		// This should PASS

ValidationRequest request = new SimpleValidationRequest();
objexItem.validate(request);
assertFalse(request.hasErrors());
assertFalse(request.hasErrors(id));
// ...
+--

Suspending Containers

 It should be noted that when you make changes to a container nothing is
 saved until you hit save. As an added feature Objex also supports the
 ability to suspend the changes you have made, then come back to them and
 optionally make further changes and then save the whole thing.
 
 It should be noted that not all runtimes are expected to support this
 functionality.
 
 Here is how it would be used:
 
+--
Container existingOrder = orderFactory.open(orderId);

// Now make a bunch of changes
existingOrder.getRootObject().setProperty("someProperty", "newValue");
// ...

// Now suspend
String transId = existingOrder.suspend();

// transId holds an id to get the container and the suspended changes back
// it should be held onto and then at some future point ...
Container container = orderFactory.open(transId);

// Now make any further changes

// Finally save the container away
container.save();
+--